\documentclass[11pt]{article}
\usepackage[top=3cm, bottom=3cm, left=2cm, right=2cm]{geometry} % Page margins
\usepackage[utf8]{inputenc}
\usepackage{amsmath}            % /eqref
\usepackage[authoryear,round]{natbib}
\usepackage{booktabs}           % Some macros to improve tables
\usepackage{amsfonts}           % \checkmark

%\VignetteIndexEntry{A quick introduction to Gruyere}
%\VignetteKeyword{food web,community,dynamics,predator-prey,trophic interactions}

\newcommand{\code}[1]{\texttt{#1}}
\newcommand{\R}{\textsf{R} }

\begin{document}

\title{Gruyere quickstart
       (\Sexpr{packageDescription('gruyere', fields='Version')})}
\author{Lawrence Hudson}
\date{\Sexpr{packageDescription('gruyere', fields='Date')}}
\maketitle

\tableofcontents

<<echo=FALSE>>=
options(warn=2)

library(gruyere)

# Makes copy-paste much less painful
options(continue=' ')
options(width=90)
options(prompt='> ')

options(SweaveHooks = list(fig=function() par(mgp=c(2.5,1,0), 
                                              mar=c(4,4,2.7,1.3),
                                              oma=c(0,0,1,0),
                                              cex.main=0.8)))
@

\section{Modular approach}
Gruyere's modular approach is shown in Fig.\ \ref{fig:modelling_approach}.
\begin{figure}[h!]
  \centering
  \includegraphics[width=16cm]{modelling_approach.pdf}
  \caption[Gruyere's modular design]{Gruyere's modular design.}
  \label{fig:modelling_approach}
\end{figure}
The \code{RunSimulation} function glues everything together. It evolves the system as follows:
\begin{enumerate}
  \item get the next time-series chunk from the simulation object
  \item show the chunk to each of the observers
  \item show the chunk to the controller
  \item if the controller says to keep going, go back to step 1
  \item if the controller says to terminate the simulation, return the final system state and reason for terminating (both given by the controller) and the final system time
\end{enumerate}

\section{Walk-through of a simulation of a resource--consumer system}
Each block in Fig. \ref{fig:modelling_approach} is explained with reference to Gruyere's `resource.consumer' demo - a simulation of the dynamics of a community containing a single producer and a single consumer.

\subsection{Preamble}
Load the package.
<<>>=
library(gruyere)    # Cheddar and deSolve are loaded automatically
@

\subsection{Community representation}
Gruyere uses the Cheddar package to provide a community representation.
<<>>=
# Create the Cheddar community whose dynamics will be simulated.
community <- Community(nodes=data.frame(node=c('R','C'), 
                                        category=c('producer', 'invertebrate'), 
                                        M=c(0.1, 1), 
                                        N=c(100, 1)), 
                       trophic.links=data.frame(resource='R', consumer='C'), 
                       properties=c(title='Resource-consumer', 
                                    M.units='kg', 
                                    N.units='m^-2'))
@
The Yodzis and Innes model requires that all populations have a valid $M$ (with `M.units' in kg) and that all populations have a `category' belonging to one of `producer', 'invertebrate', 'vert.ecto' and 'vert.endo'. The community object also defines the set of trophic links. In this case, the community also contains numerical abundance, $N$. 

\subsection{Model parameters}
There are three steps to assembling model parameters. Firstly, the parameters specification: the \code{ModelParamsSpec} function returns a vector of single values defining for the model, functional response and growth mode parameters; values of the \textit{f constants} and \textit{a constants}. If called with no parameters, \code{ModelParamsSpec} uses values of \textit{f constants} and \textit{a constants} given by \cite{YodzisAndInnes1992AmNat} (also shown in \citealp{WilliamsEtAl2007}, first table on p 44). Values can be specified as parameters to \code{ModelParamsSpec} to provide deviations from the default values. The example below using all \textit{f constants} set to $1$:
<<>>=
spec <- ModelParamsSpec(f.constants=AllFConstantsEqual())
@
See also \code{YodzisInnes92AConstants}, \code{YodzisInnes92FConstants}, \code{BroseEtAl06AConstants}, \code{OttoEtAl07AConstants}. Let's examine the spec:
<<>>=
spec
@
\code{IntermediateModelParams} combines the parameter spec with the community and returns a list containing \textit{a constants} \textit{f constants}, $f_J$, $fe$, $e$ and the functional response and growth model parameters $W$, $d$, $q$, $K$ and $a$ (\citealp{WilliamsEtAl2007}, equations 2.8--2.9 and 2.10--2.12).
<<>>=
params <- IntermediateModelParams(community, spec)
names(params)
@
The purpose of the intermediate stage is to allow deviations from the values given in the \code{spec}. Changes could be made per-species or per-trophic-link. For example, we might want to investigate the effect of increasing a single species' respiration rate relative to other consumers or we might want to make cannibalistic trophic links more efficient than other trophic links. It is convenient to make these kinds of changes when the parameters are in this easy-to-understand form.

\code{BuildModelParams} takes the list returned by \code{IntermediateModelParams} and returns a list containing the parameters required by the normalised model (\citealp{WilliamsEtAl2007}, equations 2.17--2.18): $\rho$, $x$, $y$ and $f_e$, $e$ and the functional response and growth model parameters $W$, $d$, $q$, $K$ and $a$.
<<>>=
params <- BuildModelParams(community, params) # containing rho,x,z etc
@

\subsection{Simulation and model function}
There is no one `correct' way of solving systems of ordinary differential equations for numerical simulation. Gruyere's \code{ODESimulation} object delegates the task of solving to \code{ode} function provided by the deSolve package \citep{deSolve}, which offers a wide range of methods. By default, the \code{lsoda} method used, which uses the mature and sophisticated ODEPACK fortran library \citep{Hindmarsh1983, Petzold1983}. This method detects on-the-fly whether or not the system is stiff or non-stiff and selects the appropriate method and step size. When the community being simulated exhibits body-mass ratios where consumers are much smaller than their resources (e.g.\ \citealp{BroseEtAl2006EcolLett, OttoEtAl2007Nature}), the sytem will exhibit very fast transients, which \code{lsoda} will not be able to guarantee to solve and the function will generate errors. In such cases, other methods may be more appropriate, such as Runge-Kutta (implemented by e.g.\ the \code{rk45dp7} method in \code{ode}), which pays less attention to such problems.

Gruyere defines two models functions, both of which implement the normalised model, functional response and growth model equations. The (\code{YodzisInnesDyDt}) function is written in C and is the implementation than will normally be used. An \R implementation (\code{YodzisInnesDyDt\_R}) is also provided. This is relatively easy to understand and is included as a reference and for testing the faster C implementation.
<<>>=
simulation <- ODESimulation(model=YodzisInnesDyDt, 
                            params=params, 
                            sampling.interval=0.1)
@
The time resolution is given by `sampling.interval'. Extinction thresholds are optional and can be set can be set per-population. If a population's biomass density drops below its extinction threshold within a simulation chunk, its biomass density is set to zero, the remainder of the simulation chunk is discarded and the simulation is restarted at the point of extinction. In this example, no extinctions will take place. By default, the simulation is run in chunks of 100 time units; we could change this by passing a value for the `chunk.time' argument. Other parameters to the \code{ode} function, such as `atol' and `rtol' can be passed into \code{ODESimulation}; see the help pages for \code{ode} and \code{lsoda} for more information.

\subsection{Controller}
The controller governs when simulations will be terminated. Gruyere has three different controllers: \code{MaxTimeController}, which halts simulations when a time limit is reached, \code{EquilibriumController}, which halts simulations when all populations reach an equilibrium and \code{RunningAverageController}, which halts simulations when each population's biomass density reaches either an equilibrium or a fluctuating steady state. This example uses the simplest, which terminates simulations when a time limit is reached.
<<>>=
controller <- MaxTimeController(100)
@

\subsection{Observers}
Observers are optional components that are shown time-series chunks of the simulation as it runs. An observer could potentially do anything with a time-series chunk. Gruyere contains many observers and users can write their own. Some pre-defined observers give feedback as the simulation runs, for example the \code{PlotNDeviationsObserver}, \code{PlotNvTObserver}, \code{PlotBDeviationsObserver} and \code{PlotBvTObserver} observers show the state of the simulation graphically. Two very useful observers are \code{CollectChunksObserver}, which records all of the simulation chunks in memory, and \code{WriteChunksObserver}, which writes each chunk of the time series to a file as the simulation runs. In this example, we use collect the simulation time series in memory and print out the total elapsed time of the simulation.
<<>>=
collector <- CollectChunksObserver() # Collect simulation results in memory
observers <- list(collector, ElapsedTimeObserver())
@

\subsection{RunSimulation}
We use the product of the community's $M$ and $N$, computed by Cheddar's \code{Biomass} function, to get the initial biomass density of each species.
<<>>=
res <- RunSimulation(initial.state=Biomass(community), 
                     simulation=simulation,
                     controller=controller, 
                     observers=observers)
@
The \R \code{list} \code{res} holds the final simulation time and final biomasses for each species:
<<>>=
res
@

\subsection{Observers and results}
The \code{GetTimeSeries} function returns an \R \code{matrix} containing the time series that was assembled by the \code{CollectChunksObserver} object. The first column is time, columns 2 and 3 are biomasses of the resource and consumer respectively.
<<>>=
tseries <- GetTimeSeries(collector)
head(tseries)
@

Show the results in two plots. The first uses the Gruyere function \code{PlotBvT} to show $\log_{10}-transformed$ biomass against time. The second shows the $\log_{10}$-transformed biomass of the resource against the consumer. 
\begin{center}
\SweaveOpts{width=8,height=4}
\setkeys{Gin}{width=\textwidth}
<<fig=TRUE>>=
# Plot the results
par(mfrow=c(1,2))
PlotBvT(community, tseries, col=c(1,2))

# Equilibria: eqns 12 and 13 of Yodzis and Innes (1992) on p.1160 using x and 
# y given in eqns 10 and 11, p 1156.
Re <- with(params, W[1,2] / ( (y[1,2]-1)^ (1/(q+1))))
Ce <- as.numeric(with(params, (fe[1,2]*e[1,2] / x[2]) * Re * (1-Re/K)))
abline(h=log10(Re), lty=2)
mtext(~R[e], side=4, at=log10(Re), las=1, line=0)
abline(h=log10(Ce), lty=2, col=2)
mtext(~C[e], side=4, at=log10(Ce), las=1, line=0)

plot(log10(tseries[,'R']), log10(tseries[,'C']), 
     xlab=Log10BLabel(community, name="italic(B[R])"), 
     ylab=Log10BLabel(community, name="italic(B[C])"), 
     type="l", main="Consumer vs resource")
axis(side=3, labels=FALSE)
axis(side=4, labels=FALSE)
abline(v=log10(Re))
mtext(~R[e], side=3, at=log10(Re), las=1, line=0)
abline(h=log10(Ce))
mtext(~C[e], side=4, at=log10(Ce), las=1, line=0)
@
\end{center}

\bibliographystyle{plainnat}
\bibliography{gruyere}

\end{document}

